(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{175:function(t,s,e){"use strict";e.r(s);var n=e(0),a=Object(n.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://s1.ax1x.com/2020/09/20/wToyp4.png"}}),t._v(" "),e("p",[t._v("这里假设的情景是，class组件Fu中拥有一个state，是一个数组，数组中拥有三个元素，它的三个子元素就是根据这个数组渲染而来，然后当组件Fu中，执行了setState操作，删除掉了数组中的某一项元素，整个过程中将会发生什么样的事情呢？")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._m(5),t._v(" "),e("p",[t._v("而这个对象，在组建第一次更新，实例化组件的时候才真正的被传入。它的代码在 react-reconciler包下面的。")]),t._v(" "),t._m(6),t._v(" "),t._m(7),e("p",[t._v("ReactFiberClassComponent.js 文件中。它其实提供了三个方法：")]),t._v(" "),t._m(8),t._m(9),t._v(" "),t._m(10),t._v(" "),e("p",[t._v("执行到这个方法后，真正打开了react开始一整套更新过程的大门。")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),e("p",[t._v("比如react应用初次渲染的时候，那时候整个应用对应的Fiber结构还没有生成，生成整个应用所对应的Fiber树就是在调和子节点的过程中完成的。但是我们思路跟着今天的例子，更新来讲。")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._m(22),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),e("p",[t._v("对于子节点是数组的情况来说，如果Fiber节点可以复用，那么说明这个节点只是处于更新，如果是新创建了一个Fiber节点，那么说明这个节点是这次新加的。关于这两个方法对比的细节，可以在重新开一篇文章去讲了～")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),e("p",[t._v("然后这个方法会判断当前Fiber节点的 "),e("code",[t._v("sibling")]),t._v(" 属性，也就下一个兄弟节点。如果有兄弟节点，就会返回这个兄弟节点，这意味着下一次又开始对这个兄弟节点开始做 "),e("code",[t._v("beginWrok")]),t._v(" 操作。使用之前的例子来说就是：从上至下调和到了Z1节点，Z1节点没有子阶段了，对Z1节点执行complete操作；然后对Z2节点进行调和(beginWork)，Z2节点没有子节点了对Z2节点执行complete操作；然后又开始对Z3(beginWork)节点进行调和，Z3没有子节点了，对Z3进行complete，Z3没有兄弟节点了，对其父节点Fu执行 complete 操作。。。 如果最终到了最顶点，即没有父节点，也没有兄弟节点了(就是那个"),e("App"),t._v(") 说明Fiber树的更新已经完成了，可以进行 "),e("code",[t._v("commiting")]),t._v(" 操作了。")],1),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"react整体更新的流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react整体更新的流程","aria-hidden":"true"}},[this._v("#")]),this._v(" react整体更新的流程")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们现在的 "),s("code",[this._v("react")]),this._v(" 应用的初次渲染后整体结构是以下所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1-setstate方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-setstate方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 1 setState方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在使用 ES6的语法， react编写一个classComponent式的组件的时候，都要继承 "),s("code",[this._v("React.Component")]),this._v("，正式由于继承了它，我们所编写的 classComponent 才拥有了 setState 方法。那么实际上，react提供的 setState方法，到底是做了什么事情呢？")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updater"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If a component has string refs, we will assign a different object later.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("refs "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" emptyObject"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// We initialize the default updater but the real one gets injected by the")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// renderer.")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updater "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" updater "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" ReactNoopUpdateQueue"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nComponent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("setState")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("partialState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("invariant")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partialState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" partialState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      partialState "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setState(...): takes an object of state variables to update or a '")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function which returns an object of state variables.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updater"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueueSetState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" partialState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setState'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("很明显的看到，setState的时候，实际上是执行了react所提供的一个对象的 "),s("code",[this._v("enqueueSetState")]),this._v(" 方法，并且传入了当前组件实例、将要更新成的对象、更新完成后的回调函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注入的地方在："),s("code",[this._v("beginWork")]),this._v(" 方法里面 "),s("code",[this._v("updateClassComponent")]),this._v(" 的时候，调用到了 "),s("code",[this._v("adoptClassInstance")]),this._v(" 方法。\b")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("adoptClassInstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Fiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updater "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" classComponentUpdater"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在这里注入的")]),t._v("\n  workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// The instance needs access to the fiber so that it can schedule updates")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInstance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__DEV__"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_reactInternalInstance "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fakeInternalInstance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" classComponentUpdater "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  enqueueSetState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setState 对应执行的方法")]),t._v("\n  enqueueReplaceState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 暂时没用过，不清楚其作用")]),t._v("\n  enqueueForceUpdate "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// forceUpdate对应执行的方法")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("大致的总结一下此过程就是，react在初始化classComponent的实例时，为其传入了一个updater对象，setState的时候执行了其 "),s("code",[this._v("enqueueSetState")]),this._v(" 方法，该方法所做的事情就是，首先，通过实例找到了当前这个组件所对应的Fiber对象，然后生成了一个 expirationTime(有关任务优先级)，根据 expirationTime 创建了一个 Update对象然后把这个 Update对象添加到了当前Fiber节点的更新队列中（使用的是链表去存储）。然后调用了 "),s("code",[this._v("scheduleWork")]),this._v(" 方法，传入了当前Fiber对象和当前任务的 expirationTime。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2-schedulework"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-schedulework","aria-hidden":"true"}},[this._v("#")]),this._v(" 2 scheduleWork")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("对不起，因为这篇文章很大程度上是写给我自己看的，而我已经了解过react Fiber架构。如果有其他人看到并且认为该文章可以对你产生帮助想要继续往下阅读，我假设你已经理解了react Fiber 架构。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("scheduleWork")]),t._v(" 方法首先第一行就调用了 "),e("code",[t._v("scheduleWorkToRoot")]),t._v(" 方法，目的，设置当前发起更新的Fiber节点的 "),e("code",[t._v("expirationTime")]),t._v(" 以及其祖先节点的 "),e("code",[t._v("childExpirationTime")]),t._v(" 。然后返回了一个root节点，这就是当前Fiber节点的根节点。然后调用了 "),e("code",[t._v("requestWork")]),t._v(" 方法，传入了当前根节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后 "),s("code",[this._v("requestWork")]),this._v(" 将当前的 root 节点加入到了一个队列之中。为什么要使用一个队列去管理呢？因为实际的使用情况中很有可能不只一次的使用了 "),s("code",[this._v("ReactDom.render")]),this._v(" 这个api。所以脑海里应该能想象出这样一副场景：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/09/20/wTq5SU.png",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("执行了setState后，发起更新的Fiber节点的根节点被存储在队列中等待更新，然后每一次查找都是从这个Root开始，如果当前节点的 "),s("code",[this._v("childExpirationTime")]),this._v(" 有值，那么当前节点的子节点肯定存在更新，这里在判断的时候react就会做优化、因为不管触发更新的地方在哪里，都是从root开始找，如果当前节点没有更新其子节点也没有更新的话，就可以跳过不用在查找其后代元素。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" FiberRoot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ExpirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRootToSchedule")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isRendering"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prevent reentrancy. Remaining work will be scheduled at the end of")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the currently rendering batch.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isBatchingUpdates"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Flush work at the end of the batch.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isUnbatchingUpdates"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...unless we're inside unbatchedUpdates, in which case we should")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// flush it now.")]),t._v("\n      nextFlushedRoot "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      nextFlushedExpirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sync"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performWorkOnRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Sync"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO: Get rid of Sync and use current time?")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expirationTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Sync"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performSyncWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleCallbackWithExpirationTime")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("react比较重要的批量更新的判定，也是在 "),e("code",[t._v("requestWork")]),t._v(" 中所做的。可以看到代码中，中断的地方有两处，一处是如果 "),e("code",[t._v("isRendering")]),t._v(" 为true，一处是 "),e("code",[t._v("isBatchingUpdates")]),t._v(" 也就是处于批量更新中。 当react出发合成事件时，就会先去设置 "),e("code",[t._v("isBatchingUpdates")]),t._v(" 相关的变量。所以这是为什么 在合成事件中，同时setState几次，react表现为异步的原因。在 "),e("code",[t._v("componentDidMount")]),t._v(" 生命周期中同时setState几次，表现也是异步的，但是这是被这里的另外一个条件打断的，也就是 "),e("code",[t._v("isRendering")]),t._v(" 为true了，代表react的上一次的更新还没有结束。（在"),e("code",[t._v("componentDidMount")]),t._v(" 勾子被处罚的时候，react正处于commting阶段，这个阶段的 "),e("code",[t._v("isRendering")]),t._v(" 变量为true）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3-performunitofwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-performunitofwork","aria-hidden":"true"}},[this._v("#")]),this._v(" 3 performUnitOfWork")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("之前的工作中，react已经将要更新的root推入到队列之中，接下来就是要开始更新。 由于存储的是root节点，所以一开始找到的节点是react应用最上层的节点，就是那个 "),s("code",[this._v("<App />")]),this._v("。 React 首选所做的工作是：调和子节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("performUnitOfWork")]),this._v(" 里调用了一个很关键的方法："),s("code",[this._v("beginWork")]),this._v("。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isYieldy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("isYieldy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Flush work without yielding")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Flush asynchronous work until there's a higher priority event")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYieldToRenderer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("current"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextRenderExpirationTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调和")]),t._v("\n  workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// If this doesn't spawn new work, complete the current work.")]),t._v("\n    next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  ReactCurrentOwner"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提交")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("beginWork")]),t._v(" 所返回的 next 又是当前 "),e("code",[t._v("nextUnitOfWork")]),t._v(" 的第一个子节点。所以其实可以很清晰的看到这就是一个循环的过程，对当前的Fiber节点执行 "),e("code",[t._v("beginWork")]),t._v(" 操作，返回当前Fiber节点的第一个子节点，然后又对这个子节点进行 "),e("code",[t._v("beginWork")]),t._v(" ，所以，调和子节点其实就是一个至上而下的过程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3-1-beginwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-beginwork","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.1 beginWork")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("beginWork")]),this._v(" 方法的代码比较多，它做的大概的事情就是，针对不同类型的组件调用其方法对组件进行更新（也有可能是第一次渲染）。之前提到过的react所做的优化，当节点不需要更新（"),s("code",[this._v("childExpirationTime")]),this._v("和 "),s("code",[this._v("expirationTime")]),this._v(" 都为null）的情况下直接跳过这个节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以classComponent为例子，这里最终执行了 "),s("code",[this._v("updateClassComponent")]),this._v(" 方法。这个方法的代码也比较多。简单来说，就是如果组件是第一次渲染，就多执行一步：创建实例。还有更新实例（执行一些生命周期方法等）。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" instance"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("componentDidMount "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workInProgress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|=")]),t._v(" Update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里有一点需要注意的是，"),s("code",[this._v("componentDidMount")]),this._v(" 生命周期方法并不是在这里立即执行的，而是在当前Fiber节点的")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("effectTag")]),this._v(" 打上了 "),s("code",[this._v("Update")]),this._v(" 到最后 "),s("code",[this._v("commit")]),this._v("阶段在处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后执行了一个 "),s("code",[this._v("finishClassComponent")]),this._v(" 方法，并返回了这个方法所返回的值。简单来说这个方法就是执行了 classCompoennt 的render方法，然后就是比较关键的调和部分了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3-2-reconcilechildren"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-reconcilechildren","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.2 reconcileChildren")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("reconcileChildren")]),this._v(" 里分了两种情况，一是组件是第一次渲染，二是组件已经渲染过了。最终都调用了 "),s("code",[this._v("reconcileChildFibers")]),this._v(" 方法，不同的是传入的参数中有一个是当前Fiber节点的第一个子节点，针对第一种情况，由于组件是第一次渲染，子组件还没有调和好，所以这里传入的就是null。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这个方法中，针对不同类型的组件又调用了不同的方法。简单一点来说，主要是 "),s("code",[this._v("reconcileSingleElement")]),this._v(" ：针对子组件是单个节点所调用的方法，"),s("code",[this._v("reconcileChildrenArray")]),this._v(": 针对子组件是一个数组所调用的方法。这个两个方法的主要作用就是，通过对比key找到可以复用的Fiber节点，如果没有，就新创建一个Fiber节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"_3-3-completeunitofwork"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-completeunitofwork","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.3 completeUnitOfWork")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("前面说到了，react不断从上到下去调和，然后每次都返回 Fiber.child也就是当前Fiber节点的第一个子节点在重复这个操作，但是react应用的Fiber树总是有限的，当Fiber.child返回null的时候，说明已经没有子节点了。用之前的例子来说就是 "),s("strong",[this._v("Z1")]),this._v(" 节点已经调和完毕了，接下来就要对已经调和完成的节点进行 "),s("code",[this._v("completeUnitOfWork")]),this._v(" 操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("针对 "),s("code",[this._v("hostComponent")]),this._v(" 如果是第一次渲染，就会创建一个真实的dom节点，然后使用深度优先搜索，将当前子节点的所有真实节点都append进dom节点里面（此时还在内存中操作，所以界面上不会有所体现）。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("这个方法中比较关键的地方在于对与 "),e("code",[t._v("effectTag")]),t._v(" 的处理。总的来说，就是会将当前节点的 "),e("code",[t._v("lastEffect")]),t._v(" 和 "),e("code",[t._v("firstEffect")]),t._v(" 添加到父节点的 "),e("code",[t._v("lastEffect")]),t._v(" 和 "),e("code",[t._v("firstEffect")]),t._v(" (这里也是一个链表，"),e("code",[t._v("firstEffect")]),t._v("指向第一个Fiber节点，"),e("code",[t._v("lastEffect")]),t._v(" 指向最后一个Fiber节点，Fiber节点的 "),e("code",[t._v("nextEffect")]),t._v("属性指向下一个Fiber节点)。最终，这次更新导致的所有Fiber节点产生的副作用都被传递到了最上一层，在 "),e("code",[t._v("commit")]),t._v(" 阶段的时候，只要根据这个链表，就能准确的执行相应Fiber节点的副作用操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4-commitroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-commitroot","aria-hidden":"true"}},[this._v("#")]),this._v(" 4 commitRoot")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当Fiber树完成了更新以后，就会进入 "),s("code",[this._v("commitRoot")]),this._v(" 阶段。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在之前节点的更新的过程中，从上往下调和，从下往上提交，节点涉及到副作用操作的，都不断的向上传递最终到了顶点节点的 "),s("code",[this._v("effectTag")]),this._v(" 链条中了，所以，遍历这个队列，就能找到与之相对应的Fiber节点。由此触发对应的一些比如生命周期之前的处理（比如getSnapshotBeforeUpdate就是在生命周期之前先调用的）、然后生命周期的出发也是在这个阶段进行，还有当使用了ref的时候，ref的绑定和卸载都是在这个阶段进行的。")])}],!1,null,null,null);s.default=a.exports}}]);