(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{192:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("跨域这个名字是由于浏览器同源策略产生的，浏览器同源策略是浏览器为了安全而产生的一种约定。什么是同源呢，就是同协议、同域名、同端口。")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("如果网页之间不满足 同源 要求， 将不能：")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("但是也有一些是不受同源限制的，比如：")]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("CORS 是跨域资源分享的缩写，通过设置服务端的响应头解决 XMLHttpRequest 跨域的问题，这样就可以允许任意类型的请求，需要服务器设置以下响应头：")]),t._v(" "),t._m(11),t._m(12),t._v(" "),s("p",[t._v("预检查会携带的信息为：")]),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),s("p",[t._v("同源策略是针对于浏览器端的，不针对于服务器。所以可以使用中间服务器做代理，将请求转发到目标服务器上，然后目标服务器响应中间服务器后中间服务器在响应浏览器。 现在我在项目中使用到的代理有两种：")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),s("p",[t._v("(图片来自：https://zhuanlan.zhihu.com/p/114093227)")]),t._v(" "),s("p",[t._v("关于SameSite的详细信息，可以看阮一峰的博客："),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html"),s("OutboundLink")],1)]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),s("p",[t._v("但是对于完全不同源（没有相同的一级域名）的情况下，可以通过以下办法实现通信。")]),t._v(" "),t._m(27),t._v(" "),s("p",[t._v("使用hash，location.hash的变化不会刷新页面。因此发信息的窗口可以把信息以hash的形式写入接收信息窗口的location中，从而达到通信的目的。")]),t._v(" "),t._m(28),t._v(" "),s("p",[t._v("使用window.name。window.name的值在不同的页面（甚至不同域）加载之后依然存在，并且最大值可以达到2MB。具体的使用方式是。")]),t._v(" "),t._m(29),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),t._m(34),t._v(" "),t._m(35),s("p",[t._v("这样，就可以给发送方回复消息。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"跨域及其处理方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨域及其处理方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 跨域及其处理方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"什么是跨域及浏览器同源策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域及浏览器同源策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是跨域及浏览器同源策略")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://ae01.alicdn.com/kf/Hbf31fc793eeb4897a66d9900d9b48bbb3.jpg",alt:""}}),this._v("\n这是我在本地模拟的，一个位于 "),e("code",[this._v("8081")]),this._v(" 端口下的html文件里使用异步请求 GET 去访问 8082 端口下的一个接口，然后报出了这样的错误。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("下面举例子看对于 "),e("strong",[this._v("http://www.baidu.com/index.html")]),this._v(" 会不会造成跨域：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("URL")]),t._v(" "),s("th",[t._v("结果")]),t._v(" "),s("th",[t._v("原因")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("http://www.baidu.com/blog/index.html")]),t._v(" "),s("td",[t._v("成功")]),t._v(" "),s("td",[t._v("协议、域名、端口均相同，路径不同而已")])]),t._v(" "),s("tr",[s("td",[t._v("https://www.baidu.com/index.html")]),t._v(" "),s("td",[t._v("失败")]),t._v(" "),s("td",[t._v("协议不同")])]),t._v(" "),s("tr",[s("td",[t._v("http://mm.baidu.com/index.html")]),t._v(" "),s("td",[t._v("失败")]),t._v(" "),s("td",[t._v("域名不同（二级域名不同）")])]),t._v(" "),s("tr",[s("td",[t._v("http://www.baidu.com:8080/index.html")]),t._v(" "),s("td",[t._v("失败")]),t._v(" "),s("td",[t._v("端口不同")])])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ol",[s("li",[t._v("读取 cookie 、localStorage 、sessionStorage 等资源。\n举例，在 "),s("code",[t._v("www.taobao.com")]),t._v(" 下肯定读取不到 "),s("code",[t._v("www.baidu.com")]),t._v(" 的以上资源。因为这些都是根据域名去存储的")]),t._v(" "),s("li",[t._v("发送 XHR 异步请求。这没什么好说的，注意是XHR异步请求，就是 "),s("code",[t._v("XMLHttpRequest")]),t._v(" 对象，表单是可以跨域 提交的，不仅如此，还会自动带上当前请求的那个域名的 "),s("code",[t._v("cookie")]),t._v("，这就是 "),s("code",[t._v("corf")]),t._v(" 跨站请求伪造的由来")]),t._v(" "),s("li",[t._v("获取DOM。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("页面中的链接，重定向以及表单提交不会受到同源策略限制。")]),this._v(" "),e("li",[this._v("跨域的资源是可以互相引入的，如嵌入到页面中的 "),e("code",[this._v("<script>、<img>")]),this._v("，等等。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"解决-xmlhttprequest-的跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决-xmlhttprequest-的跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" 解决 XMLHttpRequest 的跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsonp","aria-hidden":"true"}},[this._v("#")]),this._v(" JSONP")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("strong",[t._v("JSONP")]),t._v(" 就是利用了 "),s("code",[t._v("<script>")]),t._v(" 标签不受同源策略的影响来实现跨域的。但是只能用于 "),s("code",[t._v("GET")]),t._v(" 请求，具体的实现方式是，在网页中创建一个 "),s("code",[t._v("<script>")]),t._v(" 标签，请求的地址为目标url。请求的查询字符串有一个 "),s("code",[t._v("callback")]),t._v(" 参数，用来指定回调函数的名称，回调函数在js中事先声明好。让服务器接收到请求后，返回js脚本，内容是将json数据作为参数传入回调函数并且执行该函数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cors","aria-hidden":"true"}},[this._v("#")]),this._v(" CORS")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//*表示允许任意源的访问，也可以指定特定的源")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin："),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("   \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示跨域访问时带上cookie，需同时在ajax请求中设置`withCredentials: true`，")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预检请求后响应的必须字段，返回所有支持的方法，而不单是浏览器请求的那个方")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//法。这是为了避免多次"预检"请求')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Methods"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PUT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预检请求后响应的必须字段，放入预检请求时请求所带的头")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers：Content"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//允许浏览器在指定时间内，无需再发送预检请求进行协商，直接用本次协商结果即可")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Max"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1728000")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("CORS请求分为简单请求"),e("code",[this._v("(HEAD、GET、POST)")]),this._v("和非简单请求"),e("code",[this._v("(PUT或DELETE或Content-Type为application)")]),this._v(" 非简单请求会向发一个预检请求(preflight)，请求类型为OPTION，收到预检请求的响应后再发送真正的请求，这个时候的请求与简单请求无异。也就是说，对于简单请求，其实已经发送到服务器上并且服务器也会执行相应的逻辑，只是浏览器拦截了响应，提示用户已经跨域了。而对于非简单请求，浏览器会先发送一个 预检请求(preflight)，请求类型为 "),e("code",[this._v("OPTION")]),this._v(" 收到预检请求的响应验证无误后再发送真正的请求，如果验证不通过，则非简单请求不在向浏览器发起。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必要请求头，表示当前源，相应的预检响应需要返回Access-Control-Allow-Origin")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("Origin\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预检时会带上的头，表示真正请求的方法，相应的预检响应需要返回Access-Control-Allow-Method")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),t._v("Access"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Request"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Method\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//预检时会带上的头，表示真正请求会额外发送的头信息，相应的预检响应需要返回")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("同样的，服务端对于预检请求会返回相应信息。\n"),e("img",{attrs:{src:"https://s1.ax1x.com/2020/06/02/tNIFgA.png",alt:""}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("比如图中的这个预检请求的信息就可以看出，原本的请求是一个 "),s("code",[t._v("PUT")]),t._v(" 请求来源是 "),s("code",[t._v("localhost:3003")]),t._v("， 服务端响应了这个请求可以发现服务端的设置 "),s("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 为 "),s("code",[t._v("*")]),t._v("， 但是没有看到 "),s("code",[t._v("Access-Control-Allow-Methods")]),t._v(" 设置允许 "),s("code",[t._v("PUT")]),t._v(" 的信息，所以这个请求会提示跨域。复杂请求需要在 "),s("code",[t._v("Access-Control-Allow-Methods")]),t._v(" 里面设置相应方法允许才可以。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"代理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代理","aria-hidden":"true"}},[this._v("#")]),this._v(" 代理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("一是在开发环境下本地起了一个服务的情况下去访问后台服务肯定是会跨域的。这时配置 proxy 去解决这个问题。 二是在生产环境下前端资源打包成了一堆静态的资源，然后部署到 nginx 服务器上，在由 "),e("code",[this._v("nginx")]),this._v(" 服务器去做代理。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"cookie-的跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的跨域","aria-hidden":"true"}},[this._v("#")]),this._v(" cookie 的跨域")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先看看 "),e("code",[this._v("cookie")]),this._v(" 有哪些属性：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("属性")]),t._v(" "),s("th",[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("expires")]),t._v(" "),s("td",[t._v("过期时间")])]),t._v(" "),s("tr",[s("td",[t._v("domain 和 path")]),t._v(" "),s("td",[t._v("限定了cookie能被那些URL访问")])]),t._v(" "),s("tr",[s("td",[t._v("secure")]),t._v(" "),s("td",[t._v("设置cookie只在确保安全的请求中才会发送，比如https")])]),t._v(" "),s("tr",[s("td",[t._v("httpOnly")]),t._v(" "),s("td",[t._v("设置cookie是否能通过 js 去访问")])]),t._v(" "),s("tr",[s("td",[t._v("SameSite")]),t._v(" "),s("td",[t._v("用来限制第三方cookie，有三个值，Strict、Lax、None")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("code",[this._v("Strict")]),this._v("最为严格，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie;"),e("code",[this._v("Lax")]),this._v("规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外;Chrome 计划将Lax变为默认设置。这时，网站可以选择显式关闭SameSite属性，将其设为None。不过，前提是必须同时设置Secure属性（Cookie 只能通过 HTTPS 协议发送），否则无效。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://s3.ax1x.com/2021/03/12/6ULAlF.png",alt:""}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("cookie")]),t._v(" 的跨域可以通过设置 "),s("code",[t._v("document.domain")]),t._v(" 来解决。前提条件是两个域名必须属于同一个基础域名。否则设置 "),s("code",[t._v("document.domain")]),t._v(" 也是无效的，这也是出于安全考虑。比如："),s("code",[t._v("www.baidu.com")]),t._v(" 和 "),s("code",[t._v("mm.baidu.com")]),t._v("。可以通过设置 "),s("code",[t._v("document.domain=.baidu.com")]),t._v("。来实现跨域访问 "),s("code",[t._v("cookie")]),t._v(" 的目的。 比如要实现 "),s("code",[t._v("a.xxx.com")]),t._v(" 和 "),s("code",[t._v("b.xxx.com")]),t._v(" 之间的"),s("code",[t._v("cookie")]),t._v("共享。就可以把这两个页面都设置 "),s("code",[t._v("document.domain=xxx.com")]),t._v("。这样在 "),s("code",[t._v("a.xxx.com")]),t._v(" 下建立的 "),s("code",[t._v("cookie")]),t._v(" 可以在 "),s("code",[t._v("b.xxx.com")]),t._v(" 下访问到，在 "),s("code",[t._v("b.xxx.com")]),t._v(" 下建立的 "),s("code",[t._v("cookie")]),t._v(" 也可以在 "),s("code",[t._v("a.xxx.com")]),t._v(" 下访问到。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("cookie")]),t._v(" 还具有"),s("code",[t._v("path")]),t._v("属性，如果"),s("code",[t._v("http://www.a.com/dir1/index.html")]),t._v(" 建立了一个"),s("code",[t._v("cookie")]),t._v("，那么在"),s("code",[t._v("http://www.a.com/dir1/")]),t._v("目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个"),s("code",[t._v("cookie")]),t._v("。但是，如果"),s("code",[t._v("http://www.a.com/dir2/pages/")]),t._v(" 需要访问"),s("code",[t._v("http://www.a.com/dir1/index.html设置的cookes")]),t._v("，该怎么办？这时，我们要把"),s("code",[t._v("cookie")]),t._v("的"),s("code",[t._v("path")]),t._v("属性设置成"),s("code",[t._v("“/”")]),t._v("。在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享"),s("code",[t._v("cookies")]),t._v("。现在看另一个例子：如果想让 "),s("code",[t._v("http://www.a.com/dir1/devices/")]),t._v(" 和"),s("code",[t._v("http://www.a.com/dir1/users/")]),t._v("共享"),s("code",[t._v("cookie")]),t._v("，就要把"),s("code",[t._v("path")]),t._v("设成"),s("code",[t._v("“/dir1”")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"跨窗口的通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨窗口的通信","aria-hidden":"true"}},[this._v("#")]),this._v(" 跨窗口的通信")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("iframe")]),t._v("窗口和"),s("code",[t._v("window.open")]),t._v("打开的窗口若与父窗口不是同源的，都无法与创建它们的父窗口通信，无法互相访问对方的"),s("code",[t._v("document")]),t._v("对象。如果两个窗口一级域名相同，二级域名不同，可以通过设置 "),s("code",[t._v("document.domain")]),t._v(" 解决。与"),s("code",[t._v("cookie")]),t._v(" 设置 "),s("code",[t._v("document.domain")]),t._v(" 的方式一致。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"使用hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用hash","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用hash")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"使用window-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用window-name","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用window.name")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("1.在窗口A中动态添加一个iframe，将其src设置为窗口B地址。\n2.iframe添加了窗口B的页面，窗口B将要发送的消息写入到了window.name中。\n3.由于同源策略的原因，此时在窗口A中访问窗口B这个iframe的window对象会跨域，所以此时将iframe的src改成一个与窗口A同域的地址\n4.此时窗口A再去读取iframe的window对象的name属性，至此就接收到了窗口B发送的信息。\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"window-postmessage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window-postmessage","aria-hidden":"true"}},[this._v("#")]),this._v(" window.postMessage")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("postMessage")]),this._v(" 是 "),e("code",[this._v("HTML5")]),this._v(" 引入的新的API，允许两个窗口通信，即便它们不符合同源策略。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("otherWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" targetOrigin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("transfer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("otherWindow 其他窗口的一个引用，比如 iframe 的 contentWindow属性、或者是执行了window.open返回的窗口对象，或者是命名过或者是数值索引的window.frames。")]),this._v(" "),e("li",[this._v("message 将要发送到其他窗口的数据，它将会被结构化克隆算法序列化。这意味着我们可以不受限制的将数据对象安全的传送给目标窗口而不需要自己去序列化。")]),this._v(" "),e("li",[this._v("targetOrigin 通过窗口的origin属性来指定那些窗口可以收到消息事件。其值可以是字符串'*'表示无限制或者是一个URI。在发送消息的时候，如果目标窗口的协议、主机或者端口这三者任意一项不匹配 targetOrigin 的值，那么消息就不会发送成功。")]),this._v(" "),e("li",[this._v("transfer 是一串和message同时传递的Transferable对象，这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在使用 "),e("code",[this._v("window.addEventListener('message', function(e){})")]),this._v(" 就可以监听到其他窗口发送给当前窗口的信息，其中 "),e("code",[this._v("e.source")]),this._v(" 表示当前的发送方。比如：")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'message'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\te"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("postMessage")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'你好，我收到发送的消息了'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])}],!1,null,null,null);e.default=n.exports}}]);