(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{193:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("学习 Docker 的时候，首先映入眼帘的就是 Docker 到底是什么东西，它解决了什么问题。其实这是我们去学习任何一件事情最核心的一个点。接下来根据文章上的一些观点和自己的理解总结一下。")]),t._v(" "),a("p",[t._v("首先看这个问题，你觉得学习软件开发，最难的是什么？相信所有人看到这个问题的时候，脑海中都浮现出了自己在编程道路上抓耳挠腮的一段回忆。但是真正要我说起来，我觉得最难的时候，我不禁想起了那还是我在读大二的时候，那时候我想学习世界上最好的语言：PHP。好家伙，上来就是 apache 服务器配置差点给我劝退（最终研究了几天时间配置成功了，但是为什么现在我是前端而不是 PHPer，这就要扯出一个文件扩展名的惨剧了。）")]),t._v(" "),a("p",[t._v("这里牵扯出了一个词：环境。即便是对于最老的司机，配置环境仍然是一个很麻烦的事情。而 Docker 的出现，就很好的解决了这个问题。")]),t._v(" "),a("p",[t._v("Docker 的安装就不说了，针对不同的系统，网上有丰富的教程")]),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("镜像和容器，让我去理解，就像是 类和 实例 的关系。我们可以从网络上去下载一个镜像。")]),t._v(" "),t._m(3),a("p",[t._v("这行命令的意思是从远端拉取一个 nginx 的镜像。")]),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("这样做默认使用的是 Docker 提供的源，也可以从指定的地方去下载镜像，比如下面这行命令，是网易蜂巢镜像中心提供的：")]),t._v(" "),t._m(5),a("p",[t._v("有下载就有删除，删除一个或者多个容器的命令为：")]),t._v(" "),t._m(6),a("p",[t._v("需要注意的是，删除镜像的时候需要保证所有基于此镜像的创造的容器都已经删除掉了。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("删除容器（可以删除一个或者多个）：")]),t._v(" "),t._m(14),a("p",[t._v("更多命令可以查看："),a("a",{attrs:{href:"https://www.runoob.com/docker/docker-start-stop-restart-command.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker命令大全"),a("OutboundLink")],1)]),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),a("p",[t._v("然后打开命令行工具，执行以下命令：")]),t._v(" "),t._m(19),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),a("p",[t._v("运行命令的时候 Docker会创建一个容器，以此获得文件的读写权")]),t._v(" "),t._m(28),a("p",[t._v("每 run 一层就会创建一个容器、多一个分层，为了避免无用分层，所以尽量少run，多个命令用 \\ 换行分开")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._m(33),t._v(" "),a("p",[t._v("比如在启 mysql 容器的时候：")]),t._v(" "),t._m(34),t._m(35),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),a("p",[t._v("之前介绍的特性是，在 mysql 存储的时候，将容器内部的文件映射到宿主机，以实现在容器删除的时候容器运行的时候保存的数据依然保留。而 Bind Mouting 在我看来，意义就是保证宿主机的文件和容器的文件是同步的，也就是我对于宿主机文件的改变会映射到容器当中。接下来介绍一个例子。")]),t._v(" "),t._m(41),t._v(" "),t._m(42),a("p",[t._v("然后执行命令：")]),t._v(" "),t._m(43),a("p",[t._v("然后启动容器，执行：")]),t._v(" "),t._m(44),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),a("p",[t._v("然后在执行：")]),t._v(" "),t._m(48),t._m(49),t._v(" "),a("p",[t._v("在许多实际的项目跑起来后，不只具有一个两个容器，而且有些容器之间可能还具有 link 的关系。这个时候再在命令行一个一个的去敲代码启动容器就会显得很麻烦，docker-compose 可以很好的解决这个问题。")]),t._v(" "),t._m(50),t._v(" "),t._m(51),a("p",[t._v("然后执行命令：")]),t._v(" "),t._m(52),t._m(53)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"docker-使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-使用","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 使用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"docker-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-简介","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 简介")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"镜像、容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像、容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 镜像、容器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker pull nginx\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后在运行："),s("code",[this._v("docker images")]),this._v("，就可以查看本地的镜像。会发现本地的镜像已经有 nginx 了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker pull hub.c.163.com/library/nginx\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#docker images [options] [REPOSITORY[:TAG]]")]),this._v("\n\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker rmi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("[")]),this._v("IMAGE ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("#docker rmi 46102226f2fd")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器","aria-hidden":"true"}},[this._v("#")]),this._v(" 容器")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("运行一个容器，运行一个容器是需要基于镜像的。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker run --name myNginx -p 9090:80 -d 46102226f2fd\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这行命令的意思是，机遇 "),s("code",[this._v("ImageId")]),this._v(" 为 46102226f2fd 的镜像创建一个容器名为：myNginx 并且运行，并将本地的 9090 端口映射到 Docker 容器的 80 端口（这里的nginx启动以后运行在80端口下）。此时访问："),s("code",[this._v("localhost:9090")]),this._v(" 就能看到 nginx 的欢迎界面。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("运行 "),s("code",[this._v("dockdr ps")]),this._v(" 可以看到正在运行的容器：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/07/Dx6sv4.png",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("查看所有容器：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a\n")])])])]),t._v(" "),a("li",[a("p",[t._v("进入容器命令行：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" /bin/sh\n\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("命令"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker "),s("span",{pre:!0,attrs:{class:"token function"}},[this._v("rm")]),this._v(" -f "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("[")]),this._v("CONTAINER ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"使用-dockerfile-build一个镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-build一个镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 Dockerfile build一个镜像")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以制作自己的镜像。接下来制作一个很简单的镜像，首先，新建一个文件夹，随便命名，在文件夹里新建一个 "),s("code",[this._v("app.js")]),this._v(" 文件，内容很简单，写上一行 "),s("code",[this._v("console.log('hello world')")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后在新建一个 "),s("code",[this._v("Dockerfile")]),this._v(" 文件，内容如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于什么镜像  如果什么都不依赖就是base image，这里就填 scratch")]),t._v("\nFROM node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("12.18.0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("buster"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slim \nADD app.js /\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app.js"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器运行的时候执行的命令")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker build -t chechengyi/hello "),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v(".")]),this._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# . 代表在当前文件夹下寻找 Dockerfile 文件")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后可以看到控制台显示了该镜像build的过程，由于需要 node:12.18.0-buster-slim 这个镜像，时间可能会比较久。build 完成之后，执行 "),s("code",[this._v("docker images")]),this._v(" 就可以看到该镜像已经制作成功了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/09/rCeb7R.png",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"将容器-commit-成一个镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将容器-commit-成一个镜像","aria-hidden":"true"}},[this._v("#")]),this._v(" 将容器 commit 成一个镜像")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("前面讲的方法是使用 "),s("code",[this._v("Dockerfile")]),this._v(" 去build 一个镜像。现在考虑这样一个场景，我现在想要建立一个有 nginx 的镜像，这个需求很简单，我们只需要从源上pull一个 nginx 的 image 下来就可以了。可是我想对这个 nginx 做一些配置，然后创建一个镜像方便以后使用。这时候，可以将容器 commit 成一个镜像了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker commit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("image name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker commit hello chechengyi/hello2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是还是建议都使用 "),s("code",[this._v("Dockerfile")]),this._v(" 的方式去 build 镜像。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"dockerfile语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile语法","aria-hidden":"true"}},[this._v("#")]),this._v(" Dockerfile语法")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("h4",{attrs:{id:"from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#from","aria-hidden":"true"}},[t._v("#")]),t._v(" FROM")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("FROM scratch "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#制作 base image")]),t._v("\nFROM centos  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用 base image")]),t._v("\nFORM ubuntu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14.04 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 image")]),t._v("\n")])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label","aria-hidden":"true"}},[t._v("#")]),t._v(" LABEL")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v('LABEL maintainer = "984593931@qq.com"\nLABEL version = "1.0"\nLABEL description = "描述"\n')])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"run-运行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-运行命令","aria-hidden":"true"}},[t._v("#")]),t._v(" RUN  运行命令")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[this._v("RUN npm install && npm run build \\\n\t\tnode index.js.  "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 反斜线换行")]),this._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("h4",{attrs:{id:"workdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#workdir","aria-hidden":"true"}},[t._v("#")]),t._v(" WORKDIR")]),t._v(" "),a("p",[t._v("设定当前工作目录")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("WORKDIR /test  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果没有会自动创建目录")]),t._v("\nWORKDIR demo\nRUN pwd        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出结果为 test/demo")]),t._v("\n")])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"add-copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#add-copy","aria-hidden":"true"}},[t._v("#")]),t._v(" ADD  COPY")]),t._v(" "),a("p",[t._v("将当前目录的文件 ADD 或者 COPY 到 image")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("ADD hello / "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 hello 添加到 image 的根目录")]),t._v("\nADD test.tar.gz / "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加到根目录并且解压")]),t._v("\n\nWORKDIR /root\nADD hello.html test/  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 hello.html 添加到 root/test/hello")]),t._v("\n\nWORKDIR /root\nCOPY hello test/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将 hello.html 复制到 root/test/hello")]),t._v("\n\n")])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"env"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#env","aria-hidden":"true"}},[t._v("#")]),t._v(" ENV")]),t._v(" "),a("p",[t._v("设置一些常量")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("ENV USERNAME chechengyi "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置常量")]),t._v('\nRUN echo "$'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("USERNAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v('"  '),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 引用常量")]),t._v("\n")])])])]),t._v(" "),a("li",[a("h4",{attrs:{id:"run、entrypoint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run、entrypoint","aria-hidden":"true"}},[t._v("#")]),t._v(" RUN、ENTRYPOINT")]),t._v(" "),a("p",[t._v("**RUN：**设置容器启动后默认执行的命令和参数；"),a("strong",[t._v("ENTRYPOIN：")]),t._v(" 设置容器启动时运行的命令")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Shell 格式")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v('RUN npm install\nCMD echo "hello world" '),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果定义了多个CMD 只有最后一个会执行， 如果docker run指定了其他命令，CMD会被忽略")]),t._v('\nENTRYPOINT echo "hello"\n'),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ENTRYPOINT 让容器以应用程序或者服务的形式运行，不会被忽略，一定会执行。")]),t._v("\n\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Exec 格式")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("RUN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"install"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nENTRYPOINT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/bash"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"docker-数据持久化、共享"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据持久化、共享","aria-hidden":"true"}},[this._v("#")]),this._v(" Docker 数据持久化、共享")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("p",[this._v("使用场景：有些容器在运行的过程中可能会产生一些数据，比如 mysql 的容器在存储的过程中势必会产生一些文件，这时候如果数据只是存在容器中，如果容器被删除掉了数据也会消失。所以这时候想要将数据持久化到容器以外的地方。")])]),this._v(" "),s("li",[s("p",[this._v("受管理的 data Volume，由 Docker 后台自动创建")])]),this._v(" "),s("li",[s("p",[this._v("绑定挂载的 Volume，具体挂载位置可以由用户指定")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("docker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("  // 查看当前所有的 volume\ndocker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" // 删除某个 volume\ndocker volume inspect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" //查看某个 volume 的具体信息\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"方式1-data-volume"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式1-data-volume","aria-hidden":"true"}},[this._v("#")]),this._v(" 方式1: Data Volume")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker run -d -v mysql:/var/lib/mysql --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD"),s("span",{pre:!0,attrs:{class:"token operator"}},[this._v("=")]),this._v("true mysql\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后执行 "),s("code",[this._v("docker volume ls")]),this._v("，就可以看待此时创建了一个 "),s("code",[this._v("VOLUME NAME")]),this._v(" 为 mysql 的 volume：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/11/rkIMGV.png",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后查看一下这个 volume 的信息 "),s("code",[this._v("docker volume inspect mysql")]),this._v(" ：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/11/rkIrse.png",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，这样 mysql 最终被储存的位置就是宿主机的 "),s("code",[this._v("/var/lib/docker/volumes/mysql/_data")]),this._v(" 处，这样即使容器被删除掉了，数据也得以继续保存，下一次创建 mysql 容器的时候再次指定 volume 为 mysql，就可以继续使用之前存储的数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"方式二：bind-mouting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二：bind-mouting","aria-hidden":"true"}},[this._v("#")]),this._v(" 方式二：Bind Mouting")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先编写一个 "),s("code",[this._v("Dockerfile")]),this._v(" 用来构建一个 nginx 的镜像，内容如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[this._v("FROM nginx  "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 基于 nginx 镜像")]),this._v("\n\nWORKDIR /usr/share/nginx/html "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 工作目录")]),this._v("\n\nCOPY index.html index.html "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 讲当前文件夹的 index.html 文件复制到 容器 /usr/share/nginx/html")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker build -t chechengyi/nginx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[this._v(".")]),this._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 执行当前文件夹下的 Dockerfile 文件生成一个镜像 命名为chechengyi.nginx")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker run -d  --name myNginx -v "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[this._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[this._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[this._v(")")])]),this._v(":/usr/share/nginx/html  -p 9090:80 db590c2c3886\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("关键在于这个 -v 参数，它将 "),a("code",[t._v("${pwd}")]),t._v(" （当前目录的地址）与 容器的 "),a("code",[t._v("/usr/share/nginx/html")]),t._v(" 关联了，这时改当前目录下的文件也会映射到容器的 "),a("code",[t._v("/usr/share/nginx/html")]),t._v(" 中。这样修改宿主机中的 "),a("code",[t._v("index.html")]),t._v(" 文件，容器中的 "),a("code",[t._v("index.html")]),t._v(" 文件也会改变。Bind Mouting 的特性可以用于实现代码部署。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("或者我们不想去写一个这么长的命令，这时候可以借助 "),s("code",[this._v("docker-compose")]),this._v(" 去实现。在当前目录写下一个 "),s("code",[this._v("docker-compose.yml")]),this._v(" 文件，内容如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("my-nginx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" .\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("dockerfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dockerfile\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# image: chechengyi/nginx #如果nginx服务器的镜像已经构建好了就直接使用，否则使用build先构建镜像")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/share/nginx/html "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 映射目录")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' "9090'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('80"  '),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 映射端口")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker-compose up -d --build\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 加 -d 代表在后台容器服务 -build 表示在启动容器前构建镜像")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose","aria-hidden":"true"}},[this._v("#")]),this._v(" docker-compose")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先要去新建一个 "),s("code",[this._v("docker-compose.yml")]),this._v(" 文件，接下来写下一份配置文件并且写上注释：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(' "3" '),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 版本")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ziwu-server")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ./ziwu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("app/. "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 Dockerfile先构建镜像在构建容器，这里是Dockerfile的目录")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./ziwu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("app/ziwu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/ziwu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Bind Mouting 映射文件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 端口映射")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3000:7001"')]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("links")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 容器link")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" mysql\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# mysql 服务")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mysql "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于什么镜像")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(' "3306'),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v('3306" '),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 端口映射")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置变量")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" xxxxx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 映射 Data Volume")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mysql-data:/var/lib/mysql"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Data Volume 的定义")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("mysql-data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("  \n\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("docker-compose up -d --build\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# 加 -d 代表在后台容器服务 -build 表示在启动容器前构建镜像")]),this._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://s3.ax1x.com/2020/12/11/rAlx3Q.png",alt:""}})])}],!1,null,null,null);s.default=n.exports}}]);