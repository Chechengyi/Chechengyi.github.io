(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{197:function(_,v,s){"use strict";s.r(v);var t=s(0),e=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,s=_._self._c||v;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"https-原理与传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-原理与传输","aria-hidden":"true"}},[_._v("#")]),_._v(" https 原理与传输")]),_._v(" "),s("p",[s("em",[_._v("HTTPS")]),_._v(" 其实就是在传输层和应用层，也就是 "),s("em",[_._v("HTTP")]),_._v(" 协议和 "),s("em",[_._v("TCP")]),_._v(" 协议中加入了一层 SSL/TSL 协议。")]),_._v(" "),s("p",[s("em",[_._v("HTTP")]),_._v(" 是 超文本传输协议，在传输的过程中是明文传输的，是很不安全的，"),s("em",[_._v("HTTPS")]),_._v(" 就是给传输的内容做了加密。说到加密，先了解一下两种加密方法")]),_._v(" "),s("h2",{attrs:{id:"对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对称加密","aria-hidden":"true"}},[_._v("#")]),_._v(" 对称加密")]),_._v(" "),s("p",[_._v("对称加密又叫私钥加密，即信息的发送方和接收方使用同一个密钥去加密和解密数据。对称加密的特点是算法公开，加密和解密速度都快，适合大数据量进行加密，常见的对称加密算法有：DES、3DES、TDEA、Blowfish、RC5和IDEA。")]),_._v(" "),s("p",[_._v("其加密过程如下：明文 + 加密算法 + 私钥 => 密文。")]),_._v(" "),s("p",[_._v("其解密过程如下：密文 + 解密算法 + 私钥 => 明文。")]),_._v(" "),s("p",[_._v("对称加密中用到的密钥叫做私钥，私钥表示个人私有的密钥，即该密钥不能被泄漏。其加密过程中的私钥与解密过程中用到的私钥是同一个密钥，这也是称加密之所以称之为“对称”的原因。由于对称加密的算法是公开的，所以一旦私钥被泄露，那么密文就很容易被破解，所以对称加密的缺点是密钥安全管理困难。")]),_._v(" "),s("h2",{attrs:{id:"非对称加密"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非对称加密","aria-hidden":"true"}},[_._v("#")]),_._v(" 非对称加密")]),_._v(" "),s("p",[_._v("非对称加密也叫公钥加密。非对称加密安全性比对称加密要好。对称加密的通信双方使用相同的密钥，如果一方的密钥遭泄露，那么整个通信就会被破解。而非对称加密使用一对密钥，即公钥和私钥，且二者成对出现。私钥被自己保存，不能对外泄露。公钥指的是公共的密钥，任何人都可以获得该密钥。用公钥或私钥中的任何一个进行加密，用另一个进行解密。")]),_._v(" "),s("p",[_._v("被公钥加密过的密文只能被私钥解密，过程如下：")]),_._v(" "),s("p",[_._v("明文 + 加密算法 + 公钥 => 密文， 密文 + 解密算法 + 私钥 => 明文")]),_._v(" "),s("p",[_._v("被私钥加密过的密文只能被公钥解密，过程如下：")]),_._v(" "),s("p",[_._v("明文 + 加密算法 + 私钥 => 密文， 密文 + 解密算法 + 公钥 => 明文")]),_._v(" "),s("p",[_._v("非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。")]),_._v(" "),s("p",[_._v("在非对称加密中使用的主要算法有：RSA、Elgamal、Rabin、D-H、ECC（椭圆曲线加密算法）等。")]),_._v(" "),s("h2",{attrs:{id:"https-通信-握手-过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https-通信-握手-过程","aria-hidden":"true"}},[_._v("#")]),_._v(" HTTPS 通信(握手)过程")]),_._v(" "),s("p",[s("em",[_._v("HTTPS")]),_._v(" 通信过程中两种加密方式都采用了。为了考虑传输效率对传输的内容做对称加密，为了安全性对 对称加密 的密钥做非对称加密。以下是 HTTPS 的握手过程。通过查阅资料得知，并不是每一次请求都需要重新握手的，其中有一些优化手段。")]),_._v(" "),s("ul",[s("li",[_._v("客户端发送 TLS版本号+所支持加密套件列表+希望使用的TLS选项")]),_._v(" "),s("li",[_._v("服务端 选择一个客户端的加密套件+自己的证书（公钥）+希望使用的TLS选项；")]),_._v(" "),s("li",[_._v("客户端接收到服务端选择的加密套件、算法等，还有服务端返回的证书（公钥）。然后客户端会解析这个证书，-首先验证公钥是否有效，比如颁发时间、过期时间等等。如果有异常就会弹出警告框警告证书有问题。如果证书- 没有问题就生成一个随机值，然后用证书（公钥）对随机值进行 非对称加密。")]),_._v(" "),s("li",[_._v("客户端将这个加密后的值发送给服务端，服务端用自己的私钥和自己所选取的加密算法等信息解密得到客户端生- 成的随机值。这个随机值就是后续客户端和服务端通信过程中对内容进行对称加密的密钥。\n"),s("img",{attrs:{src:"https://ae01.alicdn.com/kf/H5a5fe6c278ca4f4db48ac60c5d648fa9C.png",alt:""}})])]),_._v(" "),s("p",[_._v("刚刚有说到，并不是每一次 HTTP 请求都需要重新握手的")]),_._v(" "),s("p",[_._v("接下是一段在知乎上搜寻到的回答：")]),_._v(" "),s("blockquote",[s("p",[_._v("浏览器客户端访问同一个 HTTPS 服务器，可以不必每次都进行完整的握手过程，因为完整的握手过程，涉及到"),s("strong",[_._v("认证服务器的身份")]),_._v("（数字证书），需要做大量的非对称加密/解密运算，此外还需要做"),s("strong",[_._v("伪随机函数PRF")]),_._v("，通过“"),s("strong",[_._v("Pre-Master Key”、“Server Nonce”、“Client Nonce")]),_._v("”共同推导出 "),s("strong",[_._v("session key")]),_._v("，"),s("strong",[_._v("非对称加密算法RSA/DSA非常耗费CPU资源。")])])]),_._v(" "),s("blockquote",[s("p",[_._v("为了克服这个困难，服务器维护一个以 "),s("strong",[_._v("session ID")]),_._v(" 为索引的结构体，用于临时存放 "),s("strong",[_._v("session key")]),_._v("，并在 "),s("strong",[_._v("TLS handshake（握手阶段） 阶段将 session ID 分享给浏览器")]),_._v("。")])]),_._v(" "),s("blockquote",[s("p",[_._v("当浏览器重新连接 HTTPS 服务器时， 握手阶段，出示自己的 "),s("strong",[_._v("session ID")]),_._v(" ，"),s("strong",[_._v("服务器获得 session ID ，以此为索引，可以获得和该浏览器共同拥有的session key，使用 session key 可以直接对用户流量做加密/解密动作。")]),_._v(" 这样避免了大量的幂、指数计算。")])]),_._v(" "),s("blockquote",[s("p",[_._v("当然，如果服务器没有查找到 "),s("strong",[_._v("session ID")]),_._v(" ，双方的TLS安全参数协商按照正常流程走。")])]),_._v(" "),s("blockquote",[s("p",[_._v("作者：车小胖\n链接：https://www.zhihu.com/question/67740663/answer/256288406\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])]),_._v(" "),s("p",[_._v("现在结合这个在总结一下我所理解的握手的过程：")]),_._v(" "),s("p",[_._v("总的来说，就是 在 "),s("strong",[_._v("TSL握手")]),_._v(" 客户端将后面用于对称加密的随机值（为了方便表示，后面称之为 "),s("strong",[_._v("会话密钥")]),_._v("）发送给服务端之后，服务端会将这个 "),s("strong",[_._v("会话密钥")]),_._v(" 以 "),s("strong",[_._v("session ID")]),_._v(" 为索引的结构体临时保存 （ "),s("strong",[_._v("session ID")]),_._v(" - "),s("strong",[_._v("session key")]),_._v(" ）然后将 "),s("strong",[_._v("session ID")]),_._v(" 在发送到客户端。")]),_._v(" "),s("p",[_._v("客户端每次在像服务端发起 "),s("strong",[_._v("TSL握手")]),_._v(" 的时候都会携带上 "),s("strong",[_._v("session ID")]),_._v("，这样服务端在校验客户端有携带 "),s("strong",[_._v("session ID")]),_._v("，并且通过这个 "),s("strong",[_._v("sesson ID")]),_._v(" 能取到 "),s("strong",[_._v("session key")]),_._v(" 那么 "),s("strong",[_._v("TSL")]),_._v(" 的握手过程就可以简化了。")])])}],!1,null,null,null);v.default=e.exports}}]);