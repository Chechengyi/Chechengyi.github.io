(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{194:function(t,e,s){"use strict";s.r(e);var _=s(0),a=Object(_.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("最近 leetcode 的每日一题，好多都是跟位运算有关的，今天来总结一下 JS 中位运算的一些概念，以及在实际使用中的一些用处和技巧。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("既然我们现在关心的是位运算，那就看看一个整数使用 32 位有符号整数是怎么去存储的。有符号整数使用 31 位表示整数的数值，第 32 位表示整数的符号，0 表示正数，1 表示负数。如，正数18的表示方法如下：\n"),s("a",{attrs:{href:"https://imgtu.com/i/2C5eyR",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2C5eyR.png",alt:"2C5eyR.png"}}),s("OutboundLink")],1)]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2P80yt.png",width:"80%"}}),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2PJZ8J.png",width:"80%"}}),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._m(27),t._v(" "),t._m(28),t._m(29),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgtu.com/i/2PBDII",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2PBDII.png",alt:"2PBDII.png"}}),s("OutboundLink")],1)]),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),s("p",[t._v("接下来来验证一下这样的位运算是否真的正确，这里虽引出了 React 中的应用，但是位数太多了，不方便我们举证。接下来我们使用赋予 “增删查改” 四个操作来测试一下。首先定义好每个操作对应的数值：")]),t._v(" "),t._m(33),s("p",[t._v("将代码直接粘贴到浏览器的控制台中，然后执行操作：")]),t._v(" "),s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2PWW9J.png"}}),t._v(" "),t._m(34),t._v(" "),s("img",{attrs:{src:"https://z3.ax1x.com/2021/05/27/2PheRH.png"}}),t._v(" "),t._m(35)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"js位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js位运算","aria-hidden":"true"}},[this._v("#")]),this._v(" JS位运算")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("以 JS 为例子，JS中对于数字只有一个 "),s("code",[t._v("number")]),t._v(" 类型，在底层将数字存储为"),s("strong",[t._v("64位浮点数")]),t._v(" 而在执行位运算之前，JS 会将数字转换为 "),s("strong",[t._v("32 位有符号整数")]),t._v("，"),s("strong",[t._v("执行按位操作后")]),t._v("，结果将转换回 64 位浮点数。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("不同于 Java 这样的语言，JS 数字不区分整型和浮点型，数字均以 64 位浮点格式表示。而 Java 中的 "),e("code",[this._v("int")]),this._v(" 类型则是以 32 位的有符号数字表示。但是 JS 在执行位运算的过程中，会将数字转成 32 位有符号整数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_1-js-中的位操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-js-中的位操作","aria-hidden":"true"}},[this._v("#")]),this._v(" 1  JS 中的位操作")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"按位非-not"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按位非-not","aria-hidden":"true"}},[this._v("#")]),this._v(" 按位非 (NOT)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符由一个波浪线 "),e("code",[this._v("~")]),this._v(" 表示对位求反，也就是原本是 0 变成 1，原本是 1 变成 0。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("对一个整数 num 按位取反，结果等于 它的相反数减1，即 ~num = -num - 1。")]),this._v(" "),e("li",[this._v("对一个整数两次按位非，可以得到它本身；对一个小数两次按位非，可以得到取整效果。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"按位与-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按位与-and","aria-hidden":"true"}},[this._v("#")]),this._v(" 按位与 (AND)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符为 "),e("code",[this._v("&")]),this._v("，只有两个数值对应位都为 1 的情况下才能得到 1。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("位数")]),t._v(" "),s("th",[t._v("第4位")]),t._v(" "),s("th",[t._v("第3位")]),t._v(" "),s("th",[t._v("第2位")]),t._v(" "),s("th",[t._v("第1位")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("数字a")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("数字b")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("结果(&)")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("可以用 & 来验证数字的奇偶性，将数 num 和 1 &，若结果为 1，则 num 为奇数，若结果为 0，则数为偶数。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"按位或-or"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按位或-or","aria-hidden":"true"}},[this._v("#")]),this._v(" 按位或 (OR)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符号为："),e("code",[this._v("|")]),this._v("，两个数字对应位 的值都为 0 才能得到 0，否则 为 1。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("位数")]),t._v(" "),s("th",[t._v("第4位")]),t._v(" "),s("th",[t._v("第3位")]),t._v(" "),s("th",[t._v("第2位")]),t._v(" "),s("th",[t._v("第1位")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("数字a")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("数字b")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("结果(|)")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"按位异或"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按位异或","aria-hidden":"true"}},[this._v("#")]),this._v(" 按位异或")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符号为："),e("code",[this._v("^")]),this._v("，两个数字对应位置 的值不同时为1，否则为0。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("table",[s("thead",[s("tr",[s("th",[t._v("位数")]),t._v(" "),s("th",[t._v("第4位")]),t._v(" "),s("th",[t._v("第3位")]),t._v(" "),s("th",[t._v("第2位")]),t._v(" "),s("th",[t._v("第1位")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("数字a")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("数字b")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("结果(^)")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")]),t._v(" "),s("td",[t._v("0")]),t._v(" "),s("td",[t._v("1")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("整数与它本身按位异或的结果都是 0。")]),this._v(" "),e("li",[this._v("整数与 0 按异或得到其本身。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"左移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#左移","aria-hidden":"true"}},[this._v("#")]),this._v(" 左移")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符："),e("code",[this._v("<<")]),this._v(" 。会将所有的位数向左移动指定的位数，右边的空位用0填充。左移不影响数的取整效果。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"有符号右移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有符号右移","aria-hidden":"true"}},[this._v("#")]),this._v(" 有符号右移")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符："),e("code",[this._v(">>")]),this._v("，会将所有数值的位数向右移动指定的位数，同时保留该数的符号。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"无符号右移"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无符号右移","aria-hidden":"true"}},[this._v("#")]),this._v(" 无符号右移")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("操作符："),e("code",[this._v(">>>")]),this._v("，会将数值的所有位向右移动指定的位数。无符号右移运算用 0 填充所有空位。对于正数，这与有符号右移运算的操作一样；而负数则被作为正数来处理。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"_2-一些实际的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-一些实际的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 2 一些实际的使用")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-1-求汉明距离"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-求汉明距离","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.1 求汉明距离")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。\n\n给出两个整数 x 和 y，计算它们之间的汉明距离。\n\n示例:\n\n输入: x = 1, y = 4\n\n输出: 2\n\n解释:\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\n\n上面的箭头指出了对应二进制位不同的位置。\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hamming-distance\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("对两个数字进行异或，则相同位的值都变成了 0，而不同位的值都变成了 1，然后就是如果计算出该二进制数中有多少个1，JS 中并没有提供可以直接获取二进制中有多少个1的 API，不过可以通过 "),e("code",[this._v("&1")]),this._v(" 的操作，验证第一位是否为1，然后将数字右移动一位在继续验证。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("hammingDistance")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 先使用异或")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" y\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在使用 & 检验最后一位是否为1，1 为ob01，如果最后一位为1 则结果为1，反之")]),t._v("\n    ret "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-2-react-中对于位运算的应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-react-中对于位运算的应用","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.2 React 中对于位运算的应用")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("如果有了解过 React 的源码，应该对 "),s("code",[t._v("effect")]),t._v(" 这个概念比较熟悉。简单来说，React 在其 Fiber 对象上使用了一个 "),s("code",[t._v("effectTag")]),t._v(" 属性来记录该节点将会有哪些操作。比如 "),s("code",[t._v("Deletion")]),t._v(" 是一个删除操作，"),s("code",[t._v("Snapshot")]),t._v(" 则是 ClassComponent 中的 "),s("code",[t._v("getDerivedStateFromProps")]),t._v(" 。通过使用位运算，记录当前节点具有哪些操作，借助位运算，能够高效的添加、删除、验证。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("比如现在如果要为 一个节点增加 "),s("code",[t._v("Snapshot")]),t._v(" 操作，只需要按位或："),s("code",[t._v("effectTag |= Snapshot")]),t._v(" ，如果之后还需要添加一个 "),s("code",[t._v("Ref")]),t._v(" 操作，则  "),s("code",[t._v("effctTag |= Ref")]),t._v("。 在验证节点是否具有相应的操作时，使用按位与操作：                   "),s("code",[t._v("if ( effectTag & Snapshot )")]),t._v(" ，如果 "),s("code",[t._v("effectTag")]),t._v(" 设置过 "),s("code",[t._v("Snapshot")]),t._v(" 的，则 "),s("code",[t._v("effectTag")]),t._v(" 的第 9 位一定是 1，则 "),s("code",[t._v("Fiber.effectTag & Snapshot")]),t._v(" 的值就会大于 0。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("如果现在想要删除 其中一个操作应该怎么做呢？比如现在要删除掉 "),e("code",[this._v("effectTag")]),this._v(" 中的 "),e("code",[this._v("Snapshot")]),this._v(" ，则："),e("code",[this._v("effectTag &= effectTag ^ Snapshot")]),this._v("。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" effect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始什么权限都没有")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Insert "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0001")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0010")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Deletion "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Search   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查询")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("可以看到，我们为 "),s("code",[t._v("effect")]),t._v(" 赋值了 "),s("code",[t._v("Search")]),t._v(" 和 "),s("code",[t._v("Update")]),t._v(" ，然后使用 "),s("code",[t._v("toString")]),t._v(" 方法（传入2参数，转为二进制的字符串）得到了 "),s("code",[t._v("1010")]),t._v(" ，这符合 "),s("em",[t._v("按位或")]),t._v(" 的特性，然后使用 "),s("em",[t._v("按位与")]),t._v(" 验证，"),s("code",[t._v("Search")]),t._v(" 和 "),s("code",[t._v("Update")]),t._v(" 都得到了大于 0 的值，而 "),s("code",[t._v("Insert")]),t._v(" 没有赋值过，所以按位与结果为 0。")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[t._v("在街上之前的操作，我们使用 "),s("em",[t._v("异或")]),t._v(" 之后 在按位与删除 "),s("code",[t._v("Search")]),t._v(" ，可以看到，执行操作后，数字的二进制字符串确实变成了 "),s("code",[t._v("0b0010")]),t._v("，只包含了 "),s("code",[t._v("Update")]),t._v("。")])}],!1,null,null,null);e.default=a.exports}}]);